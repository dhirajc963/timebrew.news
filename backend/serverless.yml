service: timebrew-backend

custom:
  validatedStage: ${self:custom.stages.${opt:stage, 'dev'}, 'dev'}
  stages:
    dev: dev
    prod: prod
  pythonRequirements:
    dockerizePip: true
    pythonBin: python3

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${self:custom.validatedStage}
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Requested-With
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      maxAge: 86400
  environment:
    USER_POOL_ID: ${env:USER_POOL_ID}
    CLIENT_ID: ${env:CLIENT_ID}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    SMTP_SERVER: ${env:SMTP_SERVER}
    SMTP_PORT: ${env:SMTP_PORT}
    SMTP_USERNAME: ${env:SMTP_USERNAME}
    SMTP_PASSWORD: ${env:SMTP_PASSWORD}
    PERPLEXITY_API_KEY: ${env:PERPLEXITY_API_KEY}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    STAGE: ${env:STAGE}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: "*"
        - Effect: Allow
          Action:
            - states:StartExecution
            - states:DescribeExecution
            - states:StopExecution
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"

plugins:
  - serverless-python-requirements

functions:
  # Health check function
  health:
    handler: handlers/utils/health.handler
    events:
      - http:
          path: health
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  # Auth functions
  register:
    handler: handlers/auth/register.handler
    events:
      - http:
          path: auth/register
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  # Removed login, verifyOTP, resendVerification, and refreshToken functions
  # Frontend now uses AWS Amplify directly for authentication

  # Brew functions
  getBrews:
    handler: handlers/brews/get.handler
    events:
      - http:
          path: brews
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  getBrew:
    handler: handlers/brews/get_by_id.handler
    events:
      - http:
          path: brews/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  createBrew:
    handler: handlers/brews/create.handler
    events:
      - http:
          path: brews
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  # AI Pipeline Functions
  newsCurator:
    handler: handlers/ai/news_curator.lambda_handler
    timeout: 600
    memorySize: 512

  newsEditor:
    handler: handlers/ai/news_editor.lambda_handler
    timeout: 600
    memorySize: 512

  emailDispatcher:
    handler: handlers/ai/email_dispatcher.lambda_handler
    timeout: 600
    memorySize: 256

  # Scheduler Functions
  brewScheduler:
    handler: handlers/scheduler/brew_scheduler.lambda_handler
    timeout: 600
    memorySize: 256
    environment:
      AI_PIPELINE_STATE_MACHINE_ARN: !Ref AIPipelineStateMachine
    events:
      - schedule: rate(15 minutes)

  triggerBrew:
    handler: handlers/scheduler/trigger_brew.lambda_handler
    timeout: 29
    memorySize: 256
    environment:
      AI_PIPELINE_STATE_MACHINE_ARN: !Ref AIPipelineStateMachine
    events:
      - http:
          path: trigger-brew
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  # Briefings Functions
  getBriefings:
    handler: handlers/briefings/get.lambda_handler
    timeout: 29
    memorySize: 256
    events:
      - http:
          path: briefings
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  # Feedback Functions
  submitFeedback:
    handler: handlers/feedback/submit.lambda_handler
    timeout: 29
    memorySize: 256
    events:
      - http:
          path: feedback
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

  getFeedbackStatus:
    handler: handlers/feedback/get_status.lambda_handler
    timeout: 29
    memorySize: 256
    events:
      - http:
          path: feedback/status/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With

resources:
  Resources:
    # Step Functions State Machine for AI Pipeline
    AIPipelineStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: ${self:service}-ai-pipeline-${self:provider.stage}
        RoleArn: !GetAtt StepFunctionsRole.Arn
        DefinitionString: |
          {
            "Comment": "TimeBrew AI Pipeline - News Collection, Editing, and Email Dispatch",
            "StartAt": "NewsCurator",
            "States": {
              "NewsCurator": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${self:service}-${self:provider.stage}-newsCurator",
                  "Payload.$": "$"
                },
                "ResultPath": "$.curatorResult",
                "Next": "NewsEditor",
                "Retry": [
                  {
                    "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.TooManyRequestsException"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 2,
                    "BackoffRate": 2.0
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "HandleError",
                    "ResultPath": "$.error"
                  }
                ]
              },
              "NewsEditor": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${self:service}-${self:provider.stage}-newsEditor",
                  "Payload": {
                    "run_id.$": "$.run_id"
                  }
                },
                "ResultPath": "$.editorResult",
                "Next": "EmailDispatcher",
                "Retry": [
                  {
                    "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.TooManyRequestsException"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 2,
                    "BackoffRate": 2.0
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "HandleError",
                    "ResultPath": "$.error"
                  }
                ]
              },
              "EmailDispatcher": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${self:service}-${self:provider.stage}-emailDispatcher",
                  "Payload": {
                    "run_id.$": "$.run_id"
                  }
                },
                "ResultPath": "$.dispatcherResult",
                "Next": "Success",
                "Retry": [
                  {
                    "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.TooManyRequestsException"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 2,
                    "BackoffRate": 2.0
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "HandleError",
                    "ResultPath": "$.error"
                  }
                ]
              },
              "Success": {
                "Type": "Pass",
                "Result": {
                  "status": "completed",
                  "message": "AI pipeline completed successfully"
                },
                "End": true
              },
              "HandleError": {
                "Type": "Pass",
                "Result": {
                  "status": "failed",
                  "message": "AI pipeline failed"
                },
                "End": true
              }
            }
          }

    # IAM Role for Step Functions
    StepFunctionsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-stepfunctions-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: StepFunctionsLambdaInvokePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt NewsCuratorLambdaFunction.Arn
                    - !GetAtt NewsEditorLambdaFunction.Arn
                    - !GetAtt EmailDispatcherLambdaFunction.Arn

  Outputs:
    AIPipelineStateMachine:
      Description: "ARN of the AI Pipeline State Machine"
      Value: !Ref AIPipelineStateMachine
      Export:
        Name: ${self:service}-ai-pipeline-${self:provider.stage}
